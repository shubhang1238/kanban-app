[{"D:\\Kanban-master\\src\\index.js":"1","D:\\Kanban-master\\src\\App.js":"2","D:\\Kanban-master\\src\\Components\\Board\\Board.js":"3","D:\\Kanban-master\\src\\Components\\Card\\Card.js":"4","D:\\Kanban-master\\src\\Components\\Dropdown\\Dropdown.js":"5","D:\\Kanban-master\\src\\Components\\Card\\CardInfo\\CardInfo.js":"6","D:\\Kanban-master\\src\\Components\\Modal\\Modal.js":"7","D:\\Kanban-master\\src\\Components\\Editabled\\Editable.js":"8"},{"size":219,"mtime":1632741756000,"results":"9","hashOfConfig":"10"},{"size":4073,"mtime":1699174345477,"results":"11","hashOfConfig":"10"},{"size":1673,"mtime":1632741756000,"results":"12","hashOfConfig":"10"},{"size":2747,"mtime":1632741756000,"results":"13","hashOfConfig":"10"},{"size":670,"mtime":1632741756000,"results":"14","hashOfConfig":"10"},{"size":5856,"mtime":1632741756000,"results":"15","hashOfConfig":"10"},{"size":385,"mtime":1632741756000,"results":"16","hashOfConfig":"10"},{"size":1389,"mtime":1632741756000,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"3h6yd",{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Kanban-master\\src\\index.js",[],[],"D:\\Kanban-master\\src\\App.js",[],[],"D:\\Kanban-master\\src\\Components\\Board\\Board.js",[],[],"D:\\Kanban-master\\src\\Components\\Card\\Card.js",[],[],"D:\\Kanban-master\\src\\Components\\Dropdown\\Dropdown.js",[],[],"D:\\Kanban-master\\src\\Components\\Card\\CardInfo\\CardInfo.js",["43"],[],"import React, { useEffect, useState } from \"react\";\nimport {\n  Calendar,\n  CheckSquare,\n  List,\n  Tag,\n  Trash,\n  Type,\n  X,\n} from \"react-feather\";\n\nimport Modal from \"../../Modal/Modal\";\nimport Editable from \"../../Editabled/Editable\";\n\nimport \"./CardInfo.css\";\n\nfunction CardInfo(props) {\n  const colors = [\n    \"#a8193d\",\n    \"#4fcc25\",\n    \"#1ebffa\",\n    \"#8da377\",\n    \"#9975bd\",\n    \"#cf61a1\",\n    \"#240959\",\n  ];\n\n  const [selectedColor, setSelectedColor] = useState();\n  const [values, setValues] = useState({\n    ...props.card,\n  });\n\n  const updateTitle = (value) => {\n    setValues({ ...values, title: value });\n  };\n\n  const updateDesc = (value) => {\n    setValues({ ...values, desc: value });\n  };\n\n  const addLabel = (label) => {\n    const index = values.labels.findIndex((item) => item.text === label.text);\n    if (index > -1) return;\n\n    setSelectedColor(\"\");\n    setValues({\n      ...values,\n      labels: [...values.labels, label],\n    });\n  };\n\n  const removeLabel = (label) => {\n    const tempLabels = values.labels.filter((item) => item.text !== label.text);\n\n    setValues({\n      ...values,\n      labels: tempLabels,\n    });\n  };\n\n  const addTask = (value) => {\n    const task = {\n      id: Date.now() + Math.random() * 2,\n      completed: false,\n      text: value,\n    };\n    setValues({\n      ...values,\n      tasks: [...values.tasks, task],\n    });\n  };\n\n  const removeTask = (id) => {\n    const tasks = [...values.tasks];\n\n    const tempTasks = tasks.filter((item) => item.id !== id);\n    setValues({\n      ...values,\n      tasks: tempTasks,\n    });\n  };\n\n  const updateTask = (id, value) => {\n    const tasks = [...values.tasks];\n\n    const index = tasks.findIndex((item) => item.id === id);\n    if (index < 0) return;\n\n    tasks[index].completed = value;\n\n    setValues({\n      ...values,\n      tasks,\n    });\n  };\n\n  const calculatePercent = () => {\n    if (!values.tasks?.length) return 0;\n    const completed = values.tasks?.filter((item) => item.completed)?.length;\n    return (completed / values.tasks?.length) * 100;\n  };\n\n  const updateDate = (date) => {\n    if (!date) return;\n\n    setValues({\n      ...values,\n      date,\n    });\n  };\n\n  useEffect(() => {\n    if (props.updateCard) props.updateCard(props.boardId, values.id, values);\n  }, [values]);\n\n  return (\n    <Modal onClose={props.onClose}>\n      <div className=\"cardinfo\">\n        <div className=\"cardinfo_box\">\n          <div className=\"cardinfo_box_title\">\n            <Type />\n            <p>Title</p>\n          </div>\n          <Editable\n            defaultValue={values.title}\n            text={values.title}\n            placeholder=\"Enter Title\"\n            onSubmit={updateTitle}\n          />\n        </div>\n\n        <div className=\"cardinfo_box\">\n          <div className=\"cardinfo_box_title\">\n            <List />\n            <p>Description</p>\n          </div>\n          <Editable\n            defaultValue={values.desc}\n            text={values.desc || \"Add a Description\"}\n            placeholder=\"Enter description\"\n            onSubmit={updateDesc}\n          />\n        </div>\n\n        <div className=\"cardinfo_box\">\n          <div className=\"cardinfo_box_title\">\n            <Calendar />\n            <p>Date</p>\n          </div>\n          <input\n            type=\"date\"\n            defaultValue={values.date}\n            min={new Date().toISOString().substr(0, 10)}\n            onChange={(event) => updateDate(event.target.value)}\n          />\n        </div>\n\n        <div className=\"cardinfo_box\">\n          <div className=\"cardinfo_box_title\">\n            <Tag />\n            <p>Labels</p>\n          </div>\n          <div className=\"cardinfo_box_labels\">\n            {values.labels?.map((item, index) => (\n              <label\n                key={index}\n                style={{ backgroundColor: item.color, color: \"#fff\" }}\n              >\n                {item.text}\n                <X onClick={() => removeLabel(item)} />\n              </label>\n            ))}\n          </div>\n          <ul>\n            {colors.map((item, index) => (\n              <li\n                key={index + item}\n                style={{ backgroundColor: item }}\n                className={selectedColor === item ? \"li_active\" : \"\"}\n                onClick={() => setSelectedColor(item)}\n              />\n            ))}\n          </ul>\n          <Editable\n            text=\"Add Label\"\n            placeholder=\"Enter label text\"\n            onSubmit={(value) =>\n              addLabel({ color: selectedColor, text: value })\n            }\n          />\n        </div>\n\n        <div className=\"cardinfo_box\">\n          <div className=\"cardinfo_box_title\">\n            <CheckSquare />\n            <p>Tasks</p>\n          </div>\n          <div className=\"cardinfo_box_progress-bar\">\n            <div\n              className=\"cardinfo_box_progress\"\n              style={{\n                width: `${calculatePercent()}%`,\n                backgroundColor: calculatePercent() === 100 ? \"limegreen\" : \"\",\n              }}\n            />\n          </div>\n          <div className=\"cardinfo_box_task_list\">\n            {values.tasks?.map((item) => (\n              <div key={item.id} className=\"cardinfo_box_task_checkbox\">\n                <input\n                  type=\"checkbox\"\n                  defaultChecked={item.completed}\n                  onChange={(event) =>\n                    updateTask(item.id, event.target.checked)\n                  }\n                />\n                <p className={item.completed ? \"completed\" : \"\"}>{item.text}</p>\n                <Trash onClick={() => removeTask(item.id)} />\n              </div>\n            ))}\n          </div>\n          <Editable\n            text={\"Add a Task\"}\n            placeholder=\"Enter task\"\n            onSubmit={addTask}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n}\n\nexport default CardInfo;\n","D:\\Kanban-master\\src\\Components\\Modal\\Modal.js",[],[],"D:\\Kanban-master\\src\\Components\\Editabled\\Editable.js",[],[],{"ruleId":"44","severity":1,"message":"45","line":114,"column":6,"nodeType":"46","endLine":114,"endColumn":14,"suggestions":"47"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["48"],{"desc":"49","fix":"50"},"Update the dependencies array to be: [props, values]",{"range":"51","text":"52"},[2280,2288],"[props, values]"]